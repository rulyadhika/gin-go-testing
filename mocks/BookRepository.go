// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	domain "gin-go-testing/model/domain"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, book
func (_m *BookRepository) Create(ctx *gin.Context, book *domain.Book) (*domain.Book, error) {
	ret := _m.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *domain.Book) (*domain.Book, error)); ok {
		return rf(ctx, book)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *domain.Book) *domain.Book); ok {
		r0 = rf(ctx, book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *domain.Book) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *BookRepository) FindAll(ctx *gin.Context) ([]*domain.Book, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) ([]*domain.Book, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) []*domain.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneById provides a mock function with given fields: ctx, bookId
func (_m *BookRepository) FindOneById(ctx *gin.Context, bookId uint) (*domain.Book, error) {
	ret := _m.Called(ctx, bookId)

	if len(ret) == 0 {
		panic("no return value specified for FindOneById")
	}

	var r0 *domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, uint) (*domain.Book, error)); ok {
		return rf(ctx, bookId)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, uint) *domain.Book); ok {
		r0 = rf(ctx, bookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, uint) error); ok {
		r1 = rf(ctx, bookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
