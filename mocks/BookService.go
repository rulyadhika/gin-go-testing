// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dto "gin-go-testing/model/dto"

	gin "github.com/gin-gonic/gin"
	errs "github.com/rulyadhika/go-custom-err/errs"

	mock "github.com/stretchr/testify/mock"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, bookDto
func (_m *BookService) Create(ctx *gin.Context, bookDto *dto.NewBookRequest) (*dto.BookResponse, errs.CustomError) {
	ret := _m.Called(ctx, bookDto)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dto.BookResponse
	var r1 errs.CustomError
	if rf, ok := ret.Get(0).(func(*gin.Context, *dto.NewBookRequest) (*dto.BookResponse, errs.CustomError)); ok {
		return rf(ctx, bookDto)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *dto.NewBookRequest) *dto.BookResponse); ok {
		r0 = rf(ctx, bookDto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *dto.NewBookRequest) errs.CustomError); ok {
		r1 = rf(ctx, bookDto)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.CustomError)
		}
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *BookService) FindAll(ctx *gin.Context) ([]*dto.BookResponse, errs.CustomError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*dto.BookResponse
	var r1 errs.CustomError
	if rf, ok := ret.Get(0).(func(*gin.Context) ([]*dto.BookResponse, errs.CustomError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) []*dto.BookResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.BookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) errs.CustomError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.CustomError)
		}
	}

	return r0, r1
}

// FindOneById provides a mock function with given fields: ctx, bookId
func (_m *BookService) FindOneById(ctx *gin.Context, bookId uint) (*dto.BookResponse, errs.CustomError) {
	ret := _m.Called(ctx, bookId)

	if len(ret) == 0 {
		panic("no return value specified for FindOneById")
	}

	var r0 *dto.BookResponse
	var r1 errs.CustomError
	if rf, ok := ret.Get(0).(func(*gin.Context, uint) (*dto.BookResponse, errs.CustomError)); ok {
		return rf(ctx, bookId)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, uint) *dto.BookResponse); ok {
		r0 = rf(ctx, bookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, uint) errs.CustomError); ok {
		r1 = rf(ctx, bookId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.CustomError)
		}
	}

	return r0, r1
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
